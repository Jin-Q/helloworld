<?xml version="1.0" encoding='ISO-8859-1'?>
<rule-set name="credit">
<!--信用卡等级及透支额度定义规则范例-->
<java:import>java.lang.Object</java:import>
<java:import>java.lang.String</java:import>
<java:import>java.util.*</java:import>
<java:import>com.ecc.shuffle.test.User</java:import>
<!--
下面定义规则引擎中用到的数据库字段，用英文的分号";"隔开，
并非数据库表的所有字段，而是跟规则条件判断相关的那些字段，
一般这些字段由应用程序读出后放入paramMap传递给规则引擎进行解析。
-->
<db:columns>duty;creator;othercolumn</db:columns>

<!--下面定义规则引擎中用到的方法-->
<java:functions>
	public static void printUser(com.ecc.shuffle.test.User user){
	System.out.println("User is:"+user);
	}
</java:functions>
<!--
 规则属性说明：
salience：规则优先级，数值越低，说明优先级越高；
isolation：互斥性，该规则一旦触发，同规则集内的其他规则将被锁定，不会再触发；
-->

<!--钻石用户-->
<rule name="zuanshi" salience="1" isolation="yes">
<db:columns>duty2;creator2;othercolumn2</db:columns>
<parameter identifier="user">
	<class>com.ecc.shuffle.test.User</class>
</parameter>
<java:pretreatment>user.setCreditType("C");</java:pretreatment>
<java:condition> user.getAge()>30&amp;&amp;true </java:condition>
<java:condition> 60>user.getAge()</java:condition>
<java:condition> user.getSex().equals("M") </java:condition>
<java:condition> user.getIncome()>30000||user.getAssets()>1000000 </java:condition>
<java:condition> user.getDegree()>=3 </java:condition>

<java:consequence> 
    System.out.println("=======match zuanshiUser=========");
	user.setCreditType("A");
	user.setOverdraft(300000);
	printUser(user);
</java:consequence>
</rule>

<!--白金用户-->
<rule name="baijin" salience="2" isolation="yes">
<db:columns>duty3;creator3;othercolumn3</db:columns>
<parameter identifier="user">
	<class>com.ecc.shuffle.test.User</class>
</parameter>
<java:condition> user.getAge()>25 </java:condition>
<java:condition> 70>user.getAge()</java:condition>
<java:condition> user.getSex().equals("F") </java:condition>
<java:condition> user.getIncome()>20000||user.getAssets()>500000 </java:condition>
<java:condition> user.getDegree()>=2 </java:condition>

<java:consequence> 
    System.out.println("=======match baijinUser=========");
	user.setCreditType("B");
	user.setOverdraft(100000);
	printUser(user);
</java:consequence>
</rule>

<!--金卡用户-->
<rule name="jinka" salience="3" isolation="yes">
<parameter identifier="user">
	<class>com.ecc.shuffle.test.User</class>
</parameter>
<parameter identifier="list">
	<class>java.util.ArrayList</class>
</parameter>
<java:condition> user.getAge()>20 </java:condition>
<java:condition> 70>user.getAge()</java:condition>
<java:condition> user.getIncome()>10000||user.getAssets()>300000 </java:condition>
<java:condition> user.getDegree()>=2 </java:condition>

<java:consequence> 
    System.out.println("=======match jinkaUser=========");
	user.setCreditType("C");
	user.setOverdraft(50000);
	printUser(user);
</java:consequence>
</rule>


<!--银卡用户-->
<rule name="yinka" salience="4" isolation="yes">
<parameter identifier="user">
	<class>com.ecc.shuffle.test.User</class>
</parameter>
<java:condition> user.getAge()>20 </java:condition>
<java:condition> 70>user.getAge()</java:condition>
<java:condition> user.getIncome()>5000||user.getAssets()>100000 </java:condition>
<java:condition> user.getDegree()>=1 </java:condition>

<java:consequence> 
    System.out.println("=======match yinkaUser=========");
	user.setCreditType("D");
	user.setOverdraft(10000);
	printUser(user);
</java:consequence>
</rule>

<!--普通用户-->
<rule name="putong" salience="5" isolation="yes">
<parameter identifier="user">
	<class>com.ecc.shuffle.test.User</class>
</parameter>
<java:condition> user.getAge()>10 </java:condition>
<java:condition> user.getIncome()>1000||user.getAssets()>10000 </java:condition>

<java:consequence> 
    System.out.println("=======match putongUser=========");
	user.setCreditType("E");
	user.setOverdraft(5000);
	printUser(user);
</java:consequence>
</rule>

</rule-set>

